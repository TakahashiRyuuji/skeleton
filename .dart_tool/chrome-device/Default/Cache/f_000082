define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/freezed_annotation/freezed_annotation.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/collection/src/equality.dart'], (function load__packages__device_frame__src__theme_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__freezed_annotation__freezed_annotation$46dart, packages__flutter__src__foundation__debug$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const freezed_annotation = packages__freezed_annotation__freezed_annotation$46dart.freezed_annotation;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var theme = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    DiagnosticsPropertyOfString: () => (T$.DiagnosticsPropertyOfString = dart.constFn(diagnostics.DiagnosticsProperty$(core.String)))(),
    DiagnosticsPropertyOfDeviceKeyboardStyle: () => (T$.DiagnosticsPropertyOfDeviceKeyboardStyle = dart.constFn(diagnostics.DiagnosticsProperty$(theme.DeviceKeyboardStyle)))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    __$DeviceFrameStyleCopyWithImplOf_DeviceFrameStyle: () => (T$.__$DeviceFrameStyleCopyWithImplOf_DeviceFrameStyle = dart.constFn(theme.__$DeviceFrameStyleCopyWithImpl$(theme._DeviceFrameStyle)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    TToT: () => (T$.TToT = dart.constFn(dart.gFnType(T => [T, [T]], T => [T$.ObjectN()])))(),
    DiagnosticsPropertyOfColor: () => (T$.DiagnosticsPropertyOfColor = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Color)))(),
    __$DeviceKeyboardStyleCopyWithImplOf_DeviceKeyboardStyle: () => (T$.__$DeviceKeyboardStyleCopyWithImplOf_DeviceKeyboardStyle = dart.constFn(theme.__$DeviceKeyboardStyleCopyWithImpl$(theme._DeviceKeyboardStyle)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283058763.0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285361518.0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 3710593837.0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: theme._$_DeviceKeyboardStyle.prototype,
        [_$_DeviceKeyboardStyle_button2ForegroundColor]: C[1] || CT.C1,
        [_$_DeviceKeyboardStyle_button2BackgroundColor]: C[2] || CT.C2,
        [_$_DeviceKeyboardStyle_button1ForegroundColor]: C[1] || CT.C1,
        [_$_DeviceKeyboardStyle_button1BackgroundColor]: C[3] || CT.C3,
        [_$_DeviceKeyboardStyle_backgroundColor]: C[4] || CT.C4
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: freezed_annotation.FreezedUnionCase.prototype,
        [_name]: "FreezedUnionCase.none",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: freezed_annotation.Freezed.prototype,
        [Freezed_fallbackUnion]: null,
        [Freezed_unionValueCase]: C[6] || CT.C6,
        [Freezed_unionKey]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[9] || CT.C9
      });
    },
    get C10() {
      return C[10] = dart.fn(theme._$identity, T$.TToT());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: theme._$DeviceFrameStyleTearOff.prototype
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: theme._$DeviceKeyboardStyleTearOff.prototype
      });
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = ["package:device_frame/src/theme.dart"];
  var style$ = dart.privateName(theme, "DeviceFrameTheme.style");
  theme.DeviceFrameTheme = class DeviceFrameTheme extends framework.InheritedWidget {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    static of(context) {
      let t0, t0$;
      let widget = context.dependOnInheritedWidgetOfExactType(theme.DeviceFrameTheme);
      t0$ = (t0 = widget, t0 == null ? null : t0.style);
      return t0$ == null ? theme.DeviceFrameStyle.dark() : t0$;
    }
    updateShouldNotify(oldWidget) {
      theme.DeviceFrameTheme.as(oldWidget);
      return !oldWidget.style[$_equals](this.style);
    }
  };
  (theme.DeviceFrameTheme.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[style$] = style;
    theme.DeviceFrameTheme.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = theme.DeviceFrameTheme.prototype;
  dart.addTypeTests(theme.DeviceFrameTheme);
  dart.addTypeCaches(theme.DeviceFrameTheme);
  dart.setMethodSignature(theme.DeviceFrameTheme, () => ({
    __proto__: dart.getMethods(theme.DeviceFrameTheme.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(theme.DeviceFrameTheme, I[0]);
  dart.setFieldSignature(theme.DeviceFrameTheme, () => ({
    __proto__: dart.getFields(theme.DeviceFrameTheme.__proto__),
    style: dart.finalFieldType(theme.DeviceFrameStyle)
  }));
  theme._$DeviceFrameStyle = class _$36DeviceFrameStyle extends core.Object {};
  theme._$DeviceFrameStyle[dart.mixinOn] = Object => class _$36DeviceFrameStyle extends Object {
    get keyboardStyle() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get copyWith() {
      return dart.throw(theme._privateConstructorUsedError);
    }
  };
  (theme._$DeviceFrameStyle[dart.mixinNew] = function() {
  }).prototype = theme._$DeviceFrameStyle.prototype;
  dart.addTypeTests(theme._$DeviceFrameStyle);
  dart.addTypeCaches(theme._$DeviceFrameStyle);
  theme._$DeviceFrameStyle[dart.implements] = () => [core.Object];
  dart.setGetterSignature(theme._$DeviceFrameStyle, () => ({
    __proto__: dart.getGetters(theme._$DeviceFrameStyle.__proto__),
    keyboardStyle: theme.DeviceKeyboardStyle,
    copyWith: theme.$DeviceFrameStyleCopyWith$(theme.DeviceFrameStyle)
  }));
  dart.setLibraryUri(theme._$DeviceFrameStyle, I[0]);
  const Object__$36DeviceFrameStyle$36 = class Object__$36DeviceFrameStyle extends core.Object {};
  (Object__$36DeviceFrameStyle$36.new = function() {
  }).prototype = Object__$36DeviceFrameStyle$36.prototype;
  dart.applyMixin(Object__$36DeviceFrameStyle$36, theme._$DeviceFrameStyle);
  theme.DeviceFrameStyle = class DeviceFrameStyle extends Object__$36DeviceFrameStyle$36 {
    static dark(opts) {
      let t0;
      let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : null;
      return new theme._$_DeviceFrameStyle.new({keyboardStyle: (t0 = keyboardStyle, t0 == null ? theme.DeviceKeyboardStyle.dark() : t0)});
    }
    static light(opts) {
      let t0;
      let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : null;
      return new theme._$_DeviceFrameStyle.new({keyboardStyle: (t0 = keyboardStyle, t0 == null ? theme.DeviceKeyboardStyle.dark() : t0)});
    }
  };
  dart.addTypeTests(theme.DeviceFrameStyle);
  dart.addTypeCaches(theme.DeviceFrameStyle);
  dart.setLibraryUri(theme.DeviceFrameStyle, I[0]);
  var Color_value = dart.privateName(ui, "Color.value");
  var _$_DeviceKeyboardStyle_button2ForegroundColor = dart.privateName(theme, "_$_DeviceKeyboardStyle.button2ForegroundColor");
  var _$_DeviceKeyboardStyle_button2BackgroundColor = dart.privateName(theme, "_$_DeviceKeyboardStyle.button2BackgroundColor");
  var _$_DeviceKeyboardStyle_button1ForegroundColor = dart.privateName(theme, "_$_DeviceKeyboardStyle.button1ForegroundColor");
  var _$_DeviceKeyboardStyle_button1BackgroundColor = dart.privateName(theme, "_$_DeviceKeyboardStyle.button1BackgroundColor");
  var _$_DeviceKeyboardStyle_backgroundColor = dart.privateName(theme, "_$_DeviceKeyboardStyle.backgroundColor");
  theme._$DeviceKeyboardStyle = class _$36DeviceKeyboardStyle extends core.Object {};
  theme._$DeviceKeyboardStyle[dart.mixinOn] = Object => class _$36DeviceKeyboardStyle extends Object {
    get backgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button1BackgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button1ForegroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button2BackgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button2ForegroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get copyWith() {
      return dart.throw(theme._privateConstructorUsedError);
    }
  };
  (theme._$DeviceKeyboardStyle[dart.mixinNew] = function() {
  }).prototype = theme._$DeviceKeyboardStyle.prototype;
  dart.addTypeTests(theme._$DeviceKeyboardStyle);
  dart.addTypeCaches(theme._$DeviceKeyboardStyle);
  theme._$DeviceKeyboardStyle[dart.implements] = () => [core.Object];
  dart.setGetterSignature(theme._$DeviceKeyboardStyle, () => ({
    __proto__: dart.getGetters(theme._$DeviceKeyboardStyle.__proto__),
    backgroundColor: ui.Color,
    button1BackgroundColor: ui.Color,
    button1ForegroundColor: ui.Color,
    button2BackgroundColor: ui.Color,
    button2ForegroundColor: ui.Color,
    copyWith: theme.$DeviceKeyboardStyleCopyWith$(theme.DeviceKeyboardStyle)
  }));
  dart.setLibraryUri(theme._$DeviceKeyboardStyle, I[0]);
  const Object__$36DeviceKeyboardStyle$36 = class Object__$36DeviceKeyboardStyle extends core.Object {};
  (Object__$36DeviceKeyboardStyle$36.new = function() {
  }).prototype = Object__$36DeviceKeyboardStyle$36.prototype;
  dart.applyMixin(Object__$36DeviceKeyboardStyle$36, theme._$DeviceKeyboardStyle);
  theme.DeviceKeyboardStyle = class DeviceKeyboardStyle extends Object__$36DeviceKeyboardStyle$36 {
    static dark() {
      return C[0] || CT.C0;
    }
  };
  dart.addTypeTests(theme.DeviceKeyboardStyle);
  dart.addTypeCaches(theme.DeviceKeyboardStyle);
  dart.setLibraryUri(theme.DeviceKeyboardStyle, I[0]);
  theme._$DeviceFrameStyleTearOff = class _$36DeviceFrameStyleTearOff extends core.Object {
    call(opts) {
      let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : null;
      return new theme._$_DeviceFrameStyle.new({keyboardStyle: keyboardStyle});
    }
  };
  (theme._$DeviceFrameStyleTearOff.new = function() {
    ;
  }).prototype = theme._$DeviceFrameStyleTearOff.prototype;
  dart.addTypeTests(theme._$DeviceFrameStyleTearOff);
  dart.addTypeCaches(theme._$DeviceFrameStyleTearOff);
  dart.setMethodSignature(theme._$DeviceFrameStyleTearOff, () => ({
    __proto__: dart.getMethods(theme._$DeviceFrameStyleTearOff.__proto__),
    call: dart.fnType(theme._DeviceFrameStyle, [], {}, {keyboardStyle: theme.DeviceKeyboardStyle})
  }));
  dart.setLibraryUri(theme._$DeviceFrameStyleTearOff, I[0]);
  const _is_$36DeviceFrameStyleCopyWith_default = Symbol('_is_$36DeviceFrameStyleCopyWith_default');
  theme.$DeviceFrameStyleCopyWith$ = dart.generic($36Res => {
    class $36DeviceFrameStyleCopyWith extends core.Object {}
    ($36DeviceFrameStyleCopyWith[dart.mixinNew] = function() {
    }).prototype = $36DeviceFrameStyleCopyWith.prototype;
    dart.addTypeTests($36DeviceFrameStyleCopyWith);
    $36DeviceFrameStyleCopyWith.prototype[_is_$36DeviceFrameStyleCopyWith_default] = true;
    dart.addTypeCaches($36DeviceFrameStyleCopyWith);
    dart.setLibraryUri($36DeviceFrameStyleCopyWith, I[0]);
    return $36DeviceFrameStyleCopyWith;
  });
  theme.$DeviceFrameStyleCopyWith = theme.$DeviceFrameStyleCopyWith$();
  dart.addTypeTests(theme.$DeviceFrameStyleCopyWith, _is_$36DeviceFrameStyleCopyWith_default);
  var _value$ = dart.privateName(theme, "_$DeviceFrameStyleCopyWithImpl._value");
  var _then$ = dart.privateName(theme, "_then");
  var _value = dart.privateName(theme, "_value");
  var Freezed_fallbackUnion = dart.privateName(freezed_annotation, "Freezed.fallbackUnion");
  var _name = dart.privateName(freezed_annotation, "_name");
  var Freezed_unionValueCase = dart.privateName(freezed_annotation, "Freezed.unionValueCase");
  var Freezed_unionKey = dart.privateName(freezed_annotation, "Freezed.unionKey");
  const _is__$36DeviceFrameStyleCopyWithImpl_default = Symbol('_is__$36DeviceFrameStyleCopyWithImpl_default');
  theme._$DeviceFrameStyleCopyWithImpl$ = dart.generic($36Res => {
    var _$DeviceKeyboardStyleCopyWithImplOf$Res = () => (_$DeviceKeyboardStyleCopyWithImplOf$Res = dart.constFn(theme._$DeviceKeyboardStyleCopyWithImpl$($36Res)))();
    var DeviceKeyboardStyleTo$Res = () => (DeviceKeyboardStyleTo$Res = dart.constFn(dart.fnType($36Res, [theme.DeviceKeyboardStyle])))();
    class _$36DeviceFrameStyleCopyWithImpl extends core.Object {
      get [_value]() {
        return this[_value$];
      }
      set [_value](value) {
        super[_value] = value;
      }
      call(opts) {
        let t1, t0, t0$;
        let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : C[5] || CT.C5;
        t0$ = (t0 = this[_value], t1 = dart.equals(keyboardStyle, freezed_annotation.freezed) ? this[_value].keyboardStyle : theme.DeviceKeyboardStyle.as(keyboardStyle), t0.copyWith.call({keyboardStyle: t1}));
        return this[_then$](t0$);
      }
      get keyboardStyle() {
        return new (_$DeviceKeyboardStyleCopyWithImplOf$Res()).new(this[_value].keyboardStyle, dart.fn(value => {
          let t1, t0, t0$;
          t0$ = (t0 = this[_value], t1 = value, t0.copyWith.call({keyboardStyle: t1}));
          return this[_then$](t0$);
        }, DeviceKeyboardStyleTo$Res()));
      }
    }
    (_$36DeviceFrameStyleCopyWithImpl.new = function(_value, _then) {
      this[_value$] = _value;
      this[_then$] = _then;
      ;
    }).prototype = _$36DeviceFrameStyleCopyWithImpl.prototype;
    dart.addTypeTests(_$36DeviceFrameStyleCopyWithImpl);
    _$36DeviceFrameStyleCopyWithImpl.prototype[_is__$36DeviceFrameStyleCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36DeviceFrameStyleCopyWithImpl);
    _$36DeviceFrameStyleCopyWithImpl[dart.implements] = () => [theme.$DeviceFrameStyleCopyWith$($36Res)];
    dart.setMethodSignature(_$36DeviceFrameStyleCopyWithImpl, () => ({
      __proto__: dart.getMethods(_$36DeviceFrameStyleCopyWithImpl.__proto__),
      call: dart.fnType($36Res, [], {keyboardStyle: dart.nullable(core.Object)}, {})
    }));
    dart.setGetterSignature(_$36DeviceFrameStyleCopyWithImpl, () => ({
      __proto__: dart.getGetters(_$36DeviceFrameStyleCopyWithImpl.__proto__),
      keyboardStyle: theme.$DeviceKeyboardStyleCopyWith$($36Res)
    }));
    dart.setLibraryUri(_$36DeviceFrameStyleCopyWithImpl, I[0]);
    dart.setFieldSignature(_$36DeviceFrameStyleCopyWithImpl, () => ({
      __proto__: dart.getFields(_$36DeviceFrameStyleCopyWithImpl.__proto__),
      [_value]: dart.finalFieldType(theme.DeviceFrameStyle),
      [_then$]: dart.finalFieldType(dart.fnType($36Res, [theme.DeviceFrameStyle]))
    }));
    return _$36DeviceFrameStyleCopyWithImpl;
  });
  theme._$DeviceFrameStyleCopyWithImpl = theme._$DeviceFrameStyleCopyWithImpl$();
  dart.addTypeTests(theme._$DeviceFrameStyleCopyWithImpl, _is__$36DeviceFrameStyleCopyWithImpl_default);
  const _is__$36DeviceFrameStyleCopyWith_default = Symbol('_is__$36DeviceFrameStyleCopyWith_default');
  theme._$DeviceFrameStyleCopyWith$ = dart.generic($36Res => {
    class _$36DeviceFrameStyleCopyWith extends core.Object {}
    (_$36DeviceFrameStyleCopyWith[dart.mixinNew] = function() {
    }).prototype = _$36DeviceFrameStyleCopyWith.prototype;
    dart.addTypeTests(_$36DeviceFrameStyleCopyWith);
    _$36DeviceFrameStyleCopyWith.prototype[_is__$36DeviceFrameStyleCopyWith_default] = true;
    dart.addTypeCaches(_$36DeviceFrameStyleCopyWith);
    _$36DeviceFrameStyleCopyWith[dart.implements] = () => [theme.$DeviceFrameStyleCopyWith$($36Res)];
    dart.setLibraryUri(_$36DeviceFrameStyleCopyWith, I[0]);
    return _$36DeviceFrameStyleCopyWith;
  });
  theme._$DeviceFrameStyleCopyWith = theme._$DeviceFrameStyleCopyWith$();
  dart.addTypeTests(theme._$DeviceFrameStyleCopyWith, _is__$36DeviceFrameStyleCopyWith_default);
  const _is___$36DeviceFrameStyleCopyWithImpl_default = Symbol('_is___$36DeviceFrameStyleCopyWithImpl_default');
  theme.__$DeviceFrameStyleCopyWithImpl$ = dart.generic($36Res => {
    var DeviceFrameStyleTo$Res = () => (DeviceFrameStyleTo$Res = dart.constFn(dart.fnType($36Res, [theme.DeviceFrameStyle])))();
    class __$36DeviceFrameStyleCopyWithImpl extends theme._$DeviceFrameStyleCopyWithImpl$($36Res) {
      get [_value]() {
        return theme._DeviceFrameStyle.as(super[_value]);
      }
      call(opts) {
        let t0;
        let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : C[5] || CT.C5;
        t0 = new theme._$_DeviceFrameStyle.new({keyboardStyle: dart.equals(keyboardStyle, freezed_annotation.freezed) ? this[_value].keyboardStyle : theme.DeviceKeyboardStyle.as(keyboardStyle)});
        return this[_then$](t0);
      }
    }
    (__$36DeviceFrameStyleCopyWithImpl.new = function(_value, _then) {
      __$36DeviceFrameStyleCopyWithImpl.__proto__.new.call(this, _value, dart.fn(v => _then(theme._DeviceFrameStyle.as(v)), DeviceFrameStyleTo$Res()));
      ;
    }).prototype = __$36DeviceFrameStyleCopyWithImpl.prototype;
    dart.addTypeTests(__$36DeviceFrameStyleCopyWithImpl);
    __$36DeviceFrameStyleCopyWithImpl.prototype[_is___$36DeviceFrameStyleCopyWithImpl_default] = true;
    dart.addTypeCaches(__$36DeviceFrameStyleCopyWithImpl);
    __$36DeviceFrameStyleCopyWithImpl[dart.implements] = () => [theme._$DeviceFrameStyleCopyWith$($36Res)];
    dart.setGetterSignature(__$36DeviceFrameStyleCopyWithImpl, () => ({
      __proto__: dart.getGetters(__$36DeviceFrameStyleCopyWithImpl.__proto__),
      [_value]: theme._DeviceFrameStyle
    }));
    dart.setLibraryUri(__$36DeviceFrameStyleCopyWithImpl, I[0]);
    return __$36DeviceFrameStyleCopyWithImpl;
  });
  theme.__$DeviceFrameStyleCopyWithImpl = theme.__$DeviceFrameStyleCopyWithImpl$();
  dart.addTypeTests(theme.__$DeviceFrameStyleCopyWithImpl, _is___$36DeviceFrameStyleCopyWithImpl_default);
  var keyboardStyle$ = dart.privateName(theme, "_$_DeviceFrameStyle.keyboardStyle");
  var _name$ = dart.privateName(diagnostics, "_name");
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  const Object_DiagnosticableTreeMixin$36 = class Object_DiagnosticableTreeMixin extends core.Object {};
  (Object_DiagnosticableTreeMixin$36.new = function() {
  }).prototype = Object_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(Object_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  theme._$_DeviceFrameStyle = class _$36_DeviceFrameStyle extends Object_DiagnosticableTreeMixin$36 {
    get keyboardStyle() {
      return this[keyboardStyle$];
    }
    set keyboardStyle(value) {
      super.keyboardStyle = value;
    }
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[7] || CT.C7;
      return "DeviceFrameStyle(keyboardStyle: " + dart.str(this.keyboardStyle) + ")";
    }
    debugFillProperties(properties) {
      let t0;
      super.debugFillProperties(properties);
      t0 = properties;
      (() => {
        t0.add(new (T$.DiagnosticsPropertyOfString()).new("type", "DeviceFrameStyle"));
        t0.add(new (T$.DiagnosticsPropertyOfDeviceKeyboardStyle()).new("keyboardStyle", this.keyboardStyle));
        return t0;
      })();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || theme._DeviceFrameStyle.is(other) && (other.keyboardStyle === this.keyboardStyle || (C[8] || CT.C8).equals(other.keyboardStyle, this.keyboardStyle));
    }
    get hashCode() {
      return (this[$runtimeType].hashCode ^ (C[8] || CT.C8).hash(this.keyboardStyle)) >>> 0;
    }
    get copyWith() {
      return new (T$.__$DeviceFrameStyleCopyWithImplOf_DeviceFrameStyle()).new(this, dart.gbind(C[10] || CT.C10, theme._DeviceFrameStyle));
    }
  };
  (theme._$_DeviceFrameStyle.new = function(opts) {
    let keyboardStyle = opts && 'keyboardStyle' in opts ? opts.keyboardStyle : null;
    this[keyboardStyle$] = keyboardStyle;
    ;
  }).prototype = theme._$_DeviceFrameStyle.prototype;
  dart.addTypeTests(theme._$_DeviceFrameStyle);
  dart.addTypeCaches(theme._$_DeviceFrameStyle);
  theme._$_DeviceFrameStyle[dart.implements] = () => [theme._DeviceFrameStyle];
  dart.setMethodSignature(theme._$_DeviceFrameStyle, () => ({
    __proto__: dart.getMethods(theme._$_DeviceFrameStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(theme._$_DeviceFrameStyle, () => ({
    __proto__: dart.getGetters(theme._$_DeviceFrameStyle.__proto__),
    copyWith: theme._$DeviceFrameStyleCopyWith$(theme._DeviceFrameStyle)
  }));
  dart.setLibraryUri(theme._$_DeviceFrameStyle, I[0]);
  dart.setFieldSignature(theme._$_DeviceFrameStyle, () => ({
    __proto__: dart.getFields(theme._$_DeviceFrameStyle.__proto__),
    keyboardStyle: dart.finalFieldType(theme.DeviceKeyboardStyle)
  }));
  dart.defineExtensionMethods(theme._$_DeviceFrameStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(theme._$_DeviceFrameStyle, ['hashCode']);
  theme._DeviceFrameStyle = class _DeviceFrameStyle extends core.Object {
    get keyboardStyle() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get copyWith() {
      return dart.throw(theme._privateConstructorUsedError);
    }
  };
  (theme._DeviceFrameStyle[dart.mixinNew] = function() {
  }).prototype = theme._DeviceFrameStyle.prototype;
  dart.addTypeTests(theme._DeviceFrameStyle);
  dart.addTypeCaches(theme._DeviceFrameStyle);
  theme._DeviceFrameStyle[dart.implements] = () => [theme.DeviceFrameStyle];
  dart.setGetterSignature(theme._DeviceFrameStyle, () => ({
    __proto__: dart.getGetters(theme._DeviceFrameStyle.__proto__),
    keyboardStyle: theme.DeviceKeyboardStyle,
    copyWith: theme._$DeviceFrameStyleCopyWith$(theme._DeviceFrameStyle)
  }));
  dart.setLibraryUri(theme._DeviceFrameStyle, I[0]);
  theme._$DeviceKeyboardStyleTearOff = class _$36DeviceKeyboardStyleTearOff extends core.Object {
    call(opts) {
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let button1BackgroundColor = opts && 'button1BackgroundColor' in opts ? opts.button1BackgroundColor : null;
      let button1ForegroundColor = opts && 'button1ForegroundColor' in opts ? opts.button1ForegroundColor : null;
      let button2BackgroundColor = opts && 'button2BackgroundColor' in opts ? opts.button2BackgroundColor : null;
      let button2ForegroundColor = opts && 'button2ForegroundColor' in opts ? opts.button2ForegroundColor : null;
      return new theme._$_DeviceKeyboardStyle.new({backgroundColor: backgroundColor, button1BackgroundColor: button1BackgroundColor, button1ForegroundColor: button1ForegroundColor, button2BackgroundColor: button2BackgroundColor, button2ForegroundColor: button2ForegroundColor});
    }
  };
  (theme._$DeviceKeyboardStyleTearOff.new = function() {
    ;
  }).prototype = theme._$DeviceKeyboardStyleTearOff.prototype;
  dart.addTypeTests(theme._$DeviceKeyboardStyleTearOff);
  dart.addTypeCaches(theme._$DeviceKeyboardStyleTearOff);
  dart.setMethodSignature(theme._$DeviceKeyboardStyleTearOff, () => ({
    __proto__: dart.getMethods(theme._$DeviceKeyboardStyleTearOff.__proto__),
    call: dart.fnType(theme._DeviceKeyboardStyle, [], {}, {backgroundColor: ui.Color, button1BackgroundColor: ui.Color, button1ForegroundColor: ui.Color, button2BackgroundColor: ui.Color, button2ForegroundColor: ui.Color})
  }));
  dart.setLibraryUri(theme._$DeviceKeyboardStyleTearOff, I[0]);
  const _is_$36DeviceKeyboardStyleCopyWith_default = Symbol('_is_$36DeviceKeyboardStyleCopyWith_default');
  theme.$DeviceKeyboardStyleCopyWith$ = dart.generic($36Res => {
    class $36DeviceKeyboardStyleCopyWith extends core.Object {}
    ($36DeviceKeyboardStyleCopyWith[dart.mixinNew] = function() {
    }).prototype = $36DeviceKeyboardStyleCopyWith.prototype;
    dart.addTypeTests($36DeviceKeyboardStyleCopyWith);
    $36DeviceKeyboardStyleCopyWith.prototype[_is_$36DeviceKeyboardStyleCopyWith_default] = true;
    dart.addTypeCaches($36DeviceKeyboardStyleCopyWith);
    dart.setLibraryUri($36DeviceKeyboardStyleCopyWith, I[0]);
    return $36DeviceKeyboardStyleCopyWith;
  });
  theme.$DeviceKeyboardStyleCopyWith = theme.$DeviceKeyboardStyleCopyWith$();
  dart.addTypeTests(theme.$DeviceKeyboardStyleCopyWith, _is_$36DeviceKeyboardStyleCopyWith_default);
  var _value$0 = dart.privateName(theme, "_$DeviceKeyboardStyleCopyWithImpl._value");
  const _is__$36DeviceKeyboardStyleCopyWithImpl_default = Symbol('_is__$36DeviceKeyboardStyleCopyWithImpl_default');
  theme._$DeviceKeyboardStyleCopyWithImpl$ = dart.generic($36Res => {
    class _$36DeviceKeyboardStyleCopyWithImpl extends core.Object {
      get [_value]() {
        return this[_value$0];
      }
      set [_value](value) {
        super[_value] = value;
      }
      call(opts) {
        let t5, t4, t3, t2, t1, t0, t0$;
        let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[5] || CT.C5;
        let button1BackgroundColor = opts && 'button1BackgroundColor' in opts ? opts.button1BackgroundColor : C[5] || CT.C5;
        let button1ForegroundColor = opts && 'button1ForegroundColor' in opts ? opts.button1ForegroundColor : C[5] || CT.C5;
        let button2BackgroundColor = opts && 'button2BackgroundColor' in opts ? opts.button2BackgroundColor : C[5] || CT.C5;
        let button2ForegroundColor = opts && 'button2ForegroundColor' in opts ? opts.button2ForegroundColor : C[5] || CT.C5;
        t0$ = (t0 = this[_value], t1 = dart.equals(backgroundColor, freezed_annotation.freezed) ? this[_value].backgroundColor : ui.Color.as(backgroundColor), t2 = dart.equals(button1BackgroundColor, freezed_annotation.freezed) ? this[_value].button1BackgroundColor : ui.Color.as(button1BackgroundColor), t3 = dart.equals(button1ForegroundColor, freezed_annotation.freezed) ? this[_value].button1ForegroundColor : ui.Color.as(button1ForegroundColor), t4 = dart.equals(button2BackgroundColor, freezed_annotation.freezed) ? this[_value].button2BackgroundColor : ui.Color.as(button2BackgroundColor), t5 = dart.equals(button2ForegroundColor, freezed_annotation.freezed) ? this[_value].button2ForegroundColor : ui.Color.as(button2ForegroundColor), t0.copyWith.call({backgroundColor: t1, button1BackgroundColor: t2, button1ForegroundColor: t3, button2BackgroundColor: t4, button2ForegroundColor: t5}));
        return this[_then$](t0$);
      }
    }
    (_$36DeviceKeyboardStyleCopyWithImpl.new = function(_value, _then) {
      this[_value$0] = _value;
      this[_then$] = _then;
      ;
    }).prototype = _$36DeviceKeyboardStyleCopyWithImpl.prototype;
    dart.addTypeTests(_$36DeviceKeyboardStyleCopyWithImpl);
    _$36DeviceKeyboardStyleCopyWithImpl.prototype[_is__$36DeviceKeyboardStyleCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36DeviceKeyboardStyleCopyWithImpl);
    _$36DeviceKeyboardStyleCopyWithImpl[dart.implements] = () => [theme.$DeviceKeyboardStyleCopyWith$($36Res)];
    dart.setMethodSignature(_$36DeviceKeyboardStyleCopyWithImpl, () => ({
      __proto__: dart.getMethods(_$36DeviceKeyboardStyleCopyWithImpl.__proto__),
      call: dart.fnType($36Res, [], {backgroundColor: dart.nullable(core.Object), button1BackgroundColor: dart.nullable(core.Object), button1ForegroundColor: dart.nullable(core.Object), button2BackgroundColor: dart.nullable(core.Object), button2ForegroundColor: dart.nullable(core.Object)}, {})
    }));
    dart.setLibraryUri(_$36DeviceKeyboardStyleCopyWithImpl, I[0]);
    dart.setFieldSignature(_$36DeviceKeyboardStyleCopyWithImpl, () => ({
      __proto__: dart.getFields(_$36DeviceKeyboardStyleCopyWithImpl.__proto__),
      [_value]: dart.finalFieldType(theme.DeviceKeyboardStyle),
      [_then$]: dart.finalFieldType(dart.fnType($36Res, [theme.DeviceKeyboardStyle]))
    }));
    return _$36DeviceKeyboardStyleCopyWithImpl;
  });
  theme._$DeviceKeyboardStyleCopyWithImpl = theme._$DeviceKeyboardStyleCopyWithImpl$();
  dart.addTypeTests(theme._$DeviceKeyboardStyleCopyWithImpl, _is__$36DeviceKeyboardStyleCopyWithImpl_default);
  const _is__$36DeviceKeyboardStyleCopyWith_default = Symbol('_is__$36DeviceKeyboardStyleCopyWith_default');
  theme._$DeviceKeyboardStyleCopyWith$ = dart.generic($36Res => {
    class _$36DeviceKeyboardStyleCopyWith extends core.Object {}
    (_$36DeviceKeyboardStyleCopyWith[dart.mixinNew] = function() {
    }).prototype = _$36DeviceKeyboardStyleCopyWith.prototype;
    dart.addTypeTests(_$36DeviceKeyboardStyleCopyWith);
    _$36DeviceKeyboardStyleCopyWith.prototype[_is__$36DeviceKeyboardStyleCopyWith_default] = true;
    dart.addTypeCaches(_$36DeviceKeyboardStyleCopyWith);
    _$36DeviceKeyboardStyleCopyWith[dart.implements] = () => [theme.$DeviceKeyboardStyleCopyWith$($36Res)];
    dart.setLibraryUri(_$36DeviceKeyboardStyleCopyWith, I[0]);
    return _$36DeviceKeyboardStyleCopyWith;
  });
  theme._$DeviceKeyboardStyleCopyWith = theme._$DeviceKeyboardStyleCopyWith$();
  dart.addTypeTests(theme._$DeviceKeyboardStyleCopyWith, _is__$36DeviceKeyboardStyleCopyWith_default);
  const _is___$36DeviceKeyboardStyleCopyWithImpl_default = Symbol('_is___$36DeviceKeyboardStyleCopyWithImpl_default');
  theme.__$DeviceKeyboardStyleCopyWithImpl$ = dart.generic($36Res => {
    var DeviceKeyboardStyleTo$Res = () => (DeviceKeyboardStyleTo$Res = dart.constFn(dart.fnType($36Res, [theme.DeviceKeyboardStyle])))();
    class __$36DeviceKeyboardStyleCopyWithImpl extends theme._$DeviceKeyboardStyleCopyWithImpl$($36Res) {
      get [_value]() {
        return theme._DeviceKeyboardStyle.as(super[_value]);
      }
      call(opts) {
        let t0;
        let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[5] || CT.C5;
        let button1BackgroundColor = opts && 'button1BackgroundColor' in opts ? opts.button1BackgroundColor : C[5] || CT.C5;
        let button1ForegroundColor = opts && 'button1ForegroundColor' in opts ? opts.button1ForegroundColor : C[5] || CT.C5;
        let button2BackgroundColor = opts && 'button2BackgroundColor' in opts ? opts.button2BackgroundColor : C[5] || CT.C5;
        let button2ForegroundColor = opts && 'button2ForegroundColor' in opts ? opts.button2ForegroundColor : C[5] || CT.C5;
        t0 = new theme._$_DeviceKeyboardStyle.new({backgroundColor: dart.equals(backgroundColor, freezed_annotation.freezed) ? this[_value].backgroundColor : ui.Color.as(backgroundColor), button1BackgroundColor: dart.equals(button1BackgroundColor, freezed_annotation.freezed) ? this[_value].button1BackgroundColor : ui.Color.as(button1BackgroundColor), button1ForegroundColor: dart.equals(button1ForegroundColor, freezed_annotation.freezed) ? this[_value].button1ForegroundColor : ui.Color.as(button1ForegroundColor), button2BackgroundColor: dart.equals(button2BackgroundColor, freezed_annotation.freezed) ? this[_value].button2BackgroundColor : ui.Color.as(button2BackgroundColor), button2ForegroundColor: dart.equals(button2ForegroundColor, freezed_annotation.freezed) ? this[_value].button2ForegroundColor : ui.Color.as(button2ForegroundColor)});
        return this[_then$](t0);
      }
    }
    (__$36DeviceKeyboardStyleCopyWithImpl.new = function(_value, _then) {
      __$36DeviceKeyboardStyleCopyWithImpl.__proto__.new.call(this, _value, dart.fn(v => _then(theme._DeviceKeyboardStyle.as(v)), DeviceKeyboardStyleTo$Res()));
      ;
    }).prototype = __$36DeviceKeyboardStyleCopyWithImpl.prototype;
    dart.addTypeTests(__$36DeviceKeyboardStyleCopyWithImpl);
    __$36DeviceKeyboardStyleCopyWithImpl.prototype[_is___$36DeviceKeyboardStyleCopyWithImpl_default] = true;
    dart.addTypeCaches(__$36DeviceKeyboardStyleCopyWithImpl);
    __$36DeviceKeyboardStyleCopyWithImpl[dart.implements] = () => [theme._$DeviceKeyboardStyleCopyWith$($36Res)];
    dart.setGetterSignature(__$36DeviceKeyboardStyleCopyWithImpl, () => ({
      __proto__: dart.getGetters(__$36DeviceKeyboardStyleCopyWithImpl.__proto__),
      [_value]: theme._DeviceKeyboardStyle
    }));
    dart.setLibraryUri(__$36DeviceKeyboardStyleCopyWithImpl, I[0]);
    return __$36DeviceKeyboardStyleCopyWithImpl;
  });
  theme.__$DeviceKeyboardStyleCopyWithImpl = theme.__$DeviceKeyboardStyleCopyWithImpl$();
  dart.addTypeTests(theme.__$DeviceKeyboardStyleCopyWithImpl, _is___$36DeviceKeyboardStyleCopyWithImpl_default);
  const backgroundColor$ = _$_DeviceKeyboardStyle_backgroundColor;
  const button1BackgroundColor$ = _$_DeviceKeyboardStyle_button1BackgroundColor;
  const button1ForegroundColor$ = _$_DeviceKeyboardStyle_button1ForegroundColor;
  const button2BackgroundColor$ = _$_DeviceKeyboardStyle_button2BackgroundColor;
  const button2ForegroundColor$ = _$_DeviceKeyboardStyle_button2ForegroundColor;
  const Object_DiagnosticableTreeMixin$36$ = class Object_DiagnosticableTreeMixin extends core.Object {};
  (Object_DiagnosticableTreeMixin$36$.new = function() {
  }).prototype = Object_DiagnosticableTreeMixin$36$.prototype;
  dart.applyMixin(Object_DiagnosticableTreeMixin$36$, diagnostics.DiagnosticableTreeMixin);
  theme._$_DeviceKeyboardStyle = class _$36_DeviceKeyboardStyle extends Object_DiagnosticableTreeMixin$36$ {
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get button1BackgroundColor() {
      return this[button1BackgroundColor$];
    }
    set button1BackgroundColor(value) {
      super.button1BackgroundColor = value;
    }
    get button1ForegroundColor() {
      return this[button1ForegroundColor$];
    }
    set button1ForegroundColor(value) {
      super.button1ForegroundColor = value;
    }
    get button2BackgroundColor() {
      return this[button2BackgroundColor$];
    }
    set button2BackgroundColor(value) {
      super.button2BackgroundColor = value;
    }
    get button2ForegroundColor() {
      return this[button2ForegroundColor$];
    }
    set button2ForegroundColor(value) {
      super.button2ForegroundColor = value;
    }
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[7] || CT.C7;
      return "DeviceKeyboardStyle(backgroundColor: " + dart.str(this.backgroundColor) + ", button1BackgroundColor: " + dart.str(this.button1BackgroundColor) + ", button1ForegroundColor: " + dart.str(this.button1ForegroundColor) + ", button2BackgroundColor: " + dart.str(this.button2BackgroundColor) + ", button2ForegroundColor: " + dart.str(this.button2ForegroundColor) + ")";
    }
    debugFillProperties(properties) {
      let t0;
      super.debugFillProperties(properties);
      t0 = properties;
      (() => {
        t0.add(new (T$.DiagnosticsPropertyOfString()).new("type", "DeviceKeyboardStyle"));
        t0.add(new (T$.DiagnosticsPropertyOfColor()).new("backgroundColor", this.backgroundColor));
        t0.add(new (T$.DiagnosticsPropertyOfColor()).new("button1BackgroundColor", this.button1BackgroundColor));
        t0.add(new (T$.DiagnosticsPropertyOfColor()).new("button1ForegroundColor", this.button1ForegroundColor));
        t0.add(new (T$.DiagnosticsPropertyOfColor()).new("button2BackgroundColor", this.button2BackgroundColor));
        t0.add(new (T$.DiagnosticsPropertyOfColor()).new("button2ForegroundColor", this.button2ForegroundColor));
        return t0;
      })();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || theme._DeviceKeyboardStyle.is(other) && (other.backgroundColor === this.backgroundColor || (C[8] || CT.C8).equals(other.backgroundColor, this.backgroundColor)) && (other.button1BackgroundColor === this.button1BackgroundColor || (C[8] || CT.C8).equals(other.button1BackgroundColor, this.button1BackgroundColor)) && (other.button1ForegroundColor === this.button1ForegroundColor || (C[8] || CT.C8).equals(other.button1ForegroundColor, this.button1ForegroundColor)) && (other.button2BackgroundColor === this.button2BackgroundColor || (C[8] || CT.C8).equals(other.button2BackgroundColor, this.button2BackgroundColor)) && (other.button2ForegroundColor === this.button2ForegroundColor || (C[8] || CT.C8).equals(other.button2ForegroundColor, this.button2ForegroundColor));
    }
    get hashCode() {
      return (this[$runtimeType].hashCode ^ (C[8] || CT.C8).hash(this.backgroundColor) ^ (C[8] || CT.C8).hash(this.button1BackgroundColor) ^ (C[8] || CT.C8).hash(this.button1ForegroundColor) ^ (C[8] || CT.C8).hash(this.button2BackgroundColor) ^ (C[8] || CT.C8).hash(this.button2ForegroundColor)) >>> 0;
    }
    get copyWith() {
      return new (T$.__$DeviceKeyboardStyleCopyWithImplOf_DeviceKeyboardStyle()).new(this, dart.gbind(C[10] || CT.C10, theme._DeviceKeyboardStyle));
    }
  };
  (theme._$_DeviceKeyboardStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let button1BackgroundColor = opts && 'button1BackgroundColor' in opts ? opts.button1BackgroundColor : null;
    let button1ForegroundColor = opts && 'button1ForegroundColor' in opts ? opts.button1ForegroundColor : null;
    let button2BackgroundColor = opts && 'button2BackgroundColor' in opts ? opts.button2BackgroundColor : null;
    let button2ForegroundColor = opts && 'button2ForegroundColor' in opts ? opts.button2ForegroundColor : null;
    this[backgroundColor$] = backgroundColor;
    this[button1BackgroundColor$] = button1BackgroundColor;
    this[button1ForegroundColor$] = button1ForegroundColor;
    this[button2BackgroundColor$] = button2BackgroundColor;
    this[button2ForegroundColor$] = button2ForegroundColor;
    ;
  }).prototype = theme._$_DeviceKeyboardStyle.prototype;
  dart.addTypeTests(theme._$_DeviceKeyboardStyle);
  dart.addTypeCaches(theme._$_DeviceKeyboardStyle);
  theme._$_DeviceKeyboardStyle[dart.implements] = () => [theme._DeviceKeyboardStyle];
  dart.setMethodSignature(theme._$_DeviceKeyboardStyle, () => ({
    __proto__: dart.getMethods(theme._$_DeviceKeyboardStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(theme._$_DeviceKeyboardStyle, () => ({
    __proto__: dart.getGetters(theme._$_DeviceKeyboardStyle.__proto__),
    copyWith: theme._$DeviceKeyboardStyleCopyWith$(theme._DeviceKeyboardStyle)
  }));
  dart.setLibraryUri(theme._$_DeviceKeyboardStyle, I[0]);
  dart.setFieldSignature(theme._$_DeviceKeyboardStyle, () => ({
    __proto__: dart.getFields(theme._$_DeviceKeyboardStyle.__proto__),
    backgroundColor: dart.finalFieldType(ui.Color),
    button1BackgroundColor: dart.finalFieldType(ui.Color),
    button1ForegroundColor: dart.finalFieldType(ui.Color),
    button2BackgroundColor: dart.finalFieldType(ui.Color),
    button2ForegroundColor: dart.finalFieldType(ui.Color)
  }));
  dart.defineExtensionMethods(theme._$_DeviceKeyboardStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(theme._$_DeviceKeyboardStyle, ['hashCode']);
  theme._DeviceKeyboardStyle = class _DeviceKeyboardStyle extends core.Object {
    get backgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button1BackgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button1ForegroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button2BackgroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get button2ForegroundColor() {
      return dart.throw(theme._privateConstructorUsedError);
    }
    get copyWith() {
      return dart.throw(theme._privateConstructorUsedError);
    }
  };
  (theme._DeviceKeyboardStyle[dart.mixinNew] = function() {
  }).prototype = theme._DeviceKeyboardStyle.prototype;
  dart.addTypeTests(theme._DeviceKeyboardStyle);
  dart.addTypeCaches(theme._DeviceKeyboardStyle);
  theme._DeviceKeyboardStyle[dart.implements] = () => [theme.DeviceKeyboardStyle];
  dart.setGetterSignature(theme._DeviceKeyboardStyle, () => ({
    __proto__: dart.getGetters(theme._DeviceKeyboardStyle.__proto__),
    backgroundColor: ui.Color,
    button1BackgroundColor: ui.Color,
    button1ForegroundColor: ui.Color,
    button2BackgroundColor: ui.Color,
    button2ForegroundColor: ui.Color,
    copyWith: theme._$DeviceKeyboardStyleCopyWith$(theme._DeviceKeyboardStyle)
  }));
  dart.setLibraryUri(theme._DeviceKeyboardStyle, I[0]);
  theme._$identity = function _$36identity(T, value) {
    return value;
  };
  dart.defineLazy(theme, {
    /*theme._privateConstructorUsedError*/get _privateConstructorUsedError() {
      return new core.UnsupportedError.new("It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more informations: https://github.com/rrousselGit/freezed#custom-getters-and-methods");
    },
    /*theme.$DeviceFrameStyle*/get $DeviceFrameStyle() {
      return C[11] || CT.C11;
    },
    /*theme.$DeviceKeyboardStyle*/get $DeviceKeyboardStyle() {
      return C[12] || CT.C12;
    }
  }, false);
  dart.trackLibraries("packages/device_frame/src/theme.dart", {
    "package:device_frame/src/theme.dart": theme
  }, {
    "package:device_frame/src/theme.dart": ["theme.freezed.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["theme.dart","theme.freezed.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/device_frame/src/theme.dart.lib.js"}');
  // Exports:
  return {
    src__theme: theme
  };
}));

//# sourceMappingURL=theme.dart.lib.js.map
